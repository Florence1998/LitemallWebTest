{"name": "test_delete_type[del_a]", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <span>...</span> is not clickable at point (1435, 536). Other element would receive the click: <div role=\"alert\" class=\"el-notification right\" style=\"top: 471px; z-index: 2011;\">...</div>\n  (Session info: chrome=108.0.5359.100)\nStacktrace:\nBacktrace:\n\tOrdinal0 [0x011AACD3+2075859]\n\tOrdinal0 [0x0113EE61+1633889]\n\tOrdinal0 [0x0103B7BD+571325]\n\tOrdinal0 [0x01071499+791705]\n\tOrdinal0 [0x0106F4AC+783532]\n\tOrdinal0 [0x0106D0AB+774315]\n\tOrdinal0 [0x0106BD37+769335]\n\tOrdinal0 [0x01061C76+728182]\n\tOrdinal0 [0x0108731C+881436]\n\tOrdinal0 [0x010615BF+726463]\n\tOrdinal0 [0x01087534+881972]\n\tOrdinal0 [0x0109B56A+963946]\n\tOrdinal0 [0x01087136+880950]\n\tOrdinal0 [0x0105FEFD+720637]\n\tOrdinal0 [0x01060F3F+724799]\n\tGetHandleVerifier [0x0145EED2+2769538]\n\tGetHandleVerifier [0x01450D95+2711877]\n\tGetHandleVerifier [0x0123A03A+521194]\n\tGetHandleVerifier [0x01238DA0+516432]\n\tOrdinal0 [0x0114682C+1665068]\n\tOrdinal0 [0x0114B128+1683752]\n\tOrdinal0 [0x0114B215+1683989]\n\tOrdinal0 [0x01156484+1729668]\n\tBaseThreadInitThunk [0x76DC00F9+25]\n\tRtlGetAppContainerNamedObjectPath [0x77D77BBE+286]\n\tRtlGetAppContainerNamedObjectPath [0x77D77B8E+238]", "trace": "self = <litemall.test_litemall.test_litemall_po.TestLitemall object at 0x0000024C104A64F0>, category_name = 'del_a'\n\n    @pytest.mark.parametrize(\"category_name\", [\"del_a\", \"del_b\", \"del_c\"])\n    def test_delete_type(self, category_name):\n        \"\"\"系统首页：进入商品类目\"\"\"\n        \"\"\"类目列表页面：点击添加\"\"\"\n        \"\"\"创建类目页面：创建类目\"\"\"\n        \"\"\"类目列表页面：点击删除\"\"\"\n        \"\"\"类目列表页面：获取删除结果\"\"\"\n>       res = self.home \\\n            .go_to_category() \\\n            .click_add() \\\n            .create_category(category_name) \\\n            .delete_category(category_name) \\\n            .get_delete_result()\n\ntest_litemall_po.py:49: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n..\\page_objects\\category_list_page.py:41: in delete_category\n    self.do_find(By.XPATH, f\"//*[text()='{category_name}']/../..//*[text()='删除']\").click()\nC:\\Users\\15195\\AppData\\Roaming\\Python\\Python38\\site-packages\\selenium\\webdriver\\remote\\webelement.py:88: in click\n    self._execute(Command.CLICK_ELEMENT)\nC:\\Users\\15195\\AppData\\Roaming\\Python\\Python38\\site-packages\\selenium\\webdriver\\remote\\webelement.py:396: in _execute\n    return self._parent.execute(command, params)\nC:\\Users\\15195\\AppData\\Roaming\\Python\\Python38\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:428: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x0000024C104A6970>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element click intercepted\",\"message\":\"element click intercepted: Element ...\\n\\\\tRtlGetAppContainerNamedObjectPath [0x77D77BBE+286]\\\\n\\\\tRtlGetAppContainerNamedObjectPath [0x77D77B8E+238]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"\n        Checks that a JSON response from the WebDriver does not have an error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get('status', None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get('value', None)\n            if value_json and isinstance(value_json, str):\n                import json\n                try:\n                    value = json.loads(value_json)\n                    if len(value.keys()) == 1:\n                        value = value['value']\n                    status = value.get('error', None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get('message')\n                    else:\n                        message = value.get('message', None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        if status in ErrorCode.NO_SUCH_ELEMENT:\n            exception_class = NoSuchElementException\n        elif status in ErrorCode.NO_SUCH_FRAME:\n            exception_class = NoSuchFrameException\n        elif status in ErrorCode.NO_SUCH_SHADOW_ROOT:\n            exception_class = NoSuchShadowRootException\n        elif status in ErrorCode.NO_SUCH_WINDOW:\n            exception_class = NoSuchWindowException\n        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:\n            exception_class = StaleElementReferenceException\n        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:\n            exception_class = ElementNotVisibleException\n        elif status in ErrorCode.INVALID_ELEMENT_STATE:\n            exception_class = InvalidElementStateException\n        elif status in ErrorCode.INVALID_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER:\n            exception_class = InvalidSelectorException\n        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:\n            exception_class = ElementNotSelectableException\n        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:\n            exception_class = ElementNotInteractableException\n        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:\n            exception_class = InvalidCookieDomainException\n        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:\n            exception_class = UnableToSetCookieException\n        elif status in ErrorCode.TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.SCRIPT_TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.UNKNOWN_ERROR:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:\n            exception_class = UnexpectedAlertPresentException\n        elif status in ErrorCode.NO_ALERT_OPEN:\n            exception_class = NoAlertPresentException\n        elif status in ErrorCode.IME_NOT_AVAILABLE:\n            exception_class = ImeNotAvailableException\n        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:\n            exception_class = ImeActivationFailedException\n        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:\n            exception_class = MoveTargetOutOfBoundsException\n        elif status in ErrorCode.JAVASCRIPT_ERROR:\n            exception_class = JavascriptException\n        elif status in ErrorCode.SESSION_NOT_CREATED:\n            exception_class = SessionNotCreatedException\n        elif status in ErrorCode.INVALID_ARGUMENT:\n            exception_class = InvalidArgumentException\n        elif status in ErrorCode.NO_SUCH_COOKIE:\n            exception_class = NoSuchCookieException\n        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:\n            exception_class = ScreenshotException\n        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:\n            exception_class = ElementClickInterceptedException\n        elif status in ErrorCode.INSECURE_CERTIFICATE:\n            exception_class = InsecureCertificateException\n        elif status in ErrorCode.INVALID_COORDINATES:\n            exception_class = InvalidCoordinatesException\n        elif status in ErrorCode.INVALID_SESSION_ID:\n            exception_class = InvalidSessionIdException\n        elif status in ErrorCode.UNKNOWN_METHOD:\n            exception_class = UnknownMethodException\n        else:\n            exception_class = WebDriverException\n        if not value:\n            value = response['value']\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and 'message' in value:\n            message = value['message']\n    \n        screen = None  # type: ignore[assignment]\n        if 'screen' in value:\n            screen = value['screen']\n    \n        stacktrace = None\n        st_value = value.get('stackTrace') or value.get('stacktrace')\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split('\\n')\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get('methodName', '<anonymous>')\n                        if 'className' in frame:\n                            meth = \"{}.{}\".format(frame['className'], meth)\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if 'data' in value:\n                alert_text = value['data'].get('text')\n            elif 'alert' in value:\n                alert_text = value['alert'].get('text')\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <span>...</span> is not clickable at point (1435, 536). Other element would receive the click: <div role=\"alert\" class=\"el-notification right\" style=\"top: 471px; z-index: 2011;\">...</div>\nE         (Session info: chrome=108.0.5359.100)\nE       Stacktrace:\nE       Backtrace:\nE       \tOrdinal0 [0x011AACD3+2075859]\nE       \tOrdinal0 [0x0113EE61+1633889]\nE       \tOrdinal0 [0x0103B7BD+571325]\nE       \tOrdinal0 [0x01071499+791705]\nE       \tOrdinal0 [0x0106F4AC+783532]\nE       \tOrdinal0 [0x0106D0AB+774315]\nE       \tOrdinal0 [0x0106BD37+769335]\nE       \tOrdinal0 [0x01061C76+728182]\nE       \tOrdinal0 [0x0108731C+881436]\nE       \tOrdinal0 [0x010615BF+726463]\nE       \tOrdinal0 [0x01087534+881972]\nE       \tOrdinal0 [0x0109B56A+963946]\nE       \tOrdinal0 [0x01087136+880950]\nE       \tOrdinal0 [0x0105FEFD+720637]\nE       \tOrdinal0 [0x01060F3F+724799]\nE       \tGetHandleVerifier [0x0145EED2+2769538]\nE       \tGetHandleVerifier [0x01450D95+2711877]\nE       \tGetHandleVerifier [0x0123A03A+521194]\nE       \tGetHandleVerifier [0x01238DA0+516432]\nE       \tOrdinal0 [0x0114682C+1665068]\nE       \tOrdinal0 [0x0114B128+1683752]\nE       \tOrdinal0 [0x0114B215+1683989]\nE       \tOrdinal0 [0x01156484+1729668]\nE       \tBaseThreadInitThunk [0x76DC00F9+25]\nE       \tRtlGetAppContainerNamedObjectPath [0x77D77BBE+286]\nE       \tRtlGetAppContainerNamedObjectPath [0x77D77B8E+238]\n\nC:\\Users\\15195\\AppData\\Roaming\\Python\\Python38\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:243: ElementClickInterceptedException"}, "description": "系统首页：进入商品类目", "attachments": [{"name": "log", "source": "c75696b1-e7f1-4700-9415-332994c9c477-attachment.txt", "type": "text/plain"}, {"name": "stderr", "source": "5275a82a-41ca-4785-a09c-17e4cc3c61d5-attachment.txt", "type": "text/plain"}], "parameters": [{"name": "category_name", "value": "'del_a'"}], "start": 1671103203659, "stop": 1671103204976, "uuid": "0e142d20-c54e-46c9-a9b8-50babef2b6bd", "historyId": "d1637636aaf6c98a3b64068c467a291c", "testCaseId": "888a8edf88533da48fb93f2d177c52b4", "fullName": "test_litemall_po.TestLitemall#test_delete_type", "labels": [{"name": "suite", "value": "test_litemall_po"}, {"name": "subSuite", "value": "TestLitemall"}, {"name": "host", "value": "DESKTOP-R8S5TAE"}, {"name": "thread", "value": "10744-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "test_litemall_po"}]}